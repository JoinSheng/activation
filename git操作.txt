想将dev分支合并到master分支，操作如下：
1、首先切换到master分支上
  git checkout master

2、如果是多人开发的话 需要把远程master上的代码pull下来
git pull origin master
//如果是自己一个开发就没有必要了，为了保险期间还是pull

3、然后我们把dev分支的代码合并到master上
git merge dev

4、然后查看状态及执行提交命令
git status   //查看状态

On branch master
Your branch is ahead of 'origin/master' by 12 commits.
  (use "git push" to publish your local commits)
nothing to commit, working tree clean
//上面的意思就是你有12个commit，需要push到远程master上 
//最后执行下面提交命令
5.git push origin master
...........................................................................

其他命令
git remote update origin --prune  //更新远程分支列表

git push origin --delete 远程分支名  //删除远程分支

git branch -d 本地分支名   //删除本地分支 
-------------------------------------------------------------------------------------------------------------------
git clone url //克隆

git remote -v   //查看列出远程仓库

git branch -av  //查看所有分支

git log //定义：该命令显示从最近到最远的提交日志(显示作者/日期/内容)。每一次提交都有对应的 commit id 和 commit message

ll  //查看详情

ls -al //查看当前目录下内容

git log --graph --pretty=oneline --abbrev-commit  //查看分支合并情况

echo "文字内容" > 文件名(如a.txt) //将文字添加到一个文件(若是没有则创建)

git status   //查看git当前状态,如在哪个分支上

git add 文件名  //将对应文件添加到暂存区(注意:添加的是文件到暂存区不是文件夹!!!)

git add .  //将所有文件添加到暂存区(注意:add与后面点要空一格,不然不行)(注意:添加的是文件到暂存区不是文件夹!!!)

git commit  //将暂存区文件提交到本地版本库(即本地仓库),并且进入linux编辑,按i进入插入,写完后按esc按冒号输入wq保存(注意:添加的是文件到暂存区不是文件夹!!!)

git  commit -m '提交的备注信息'  //直接备注提交信息提交(注意:添加的是文件到暂存区不是文件夹!!!)

pwd  //显示当前所处的目录(显示完整路径)

git init --bare  //创建一个裸仓库(没有.git,但里面结构存在),一般用在服务器上

git --bare init  //初始化git

git rm 文件名  //将某文件删除

git remote set-url origin 远程仓库url  //更新连接到新的远程仓库

git remote show origin  //展现连接的远程仓库

cat 文件名   //查看文件内容 

git remote add origin 远程仓库url   //添加一个远程仓库

git branch 本地分支名    //创建本地分支但不会切换到本地分支上
git checkout -b 本地分支名字  //创建并切换到新建分支上
git checkout 本地分支名字   //切换到本地分支
git push origin 本地分支名  //通过push创建远程分支
 
刚开发完项目,可执行下列命令步骤:origin是远程仓库的别名,也是主机名之一
1.先切换到要推送的本地分支
2.git add .
3.git commit -m '提交的备注信息'
4.git push -u origin 当前本地某分支 或者用 git push --set-upstream origin 当前本地分支名字  
//当远程仓库没有本地对应的分支时,通过推送在远程建立对应的分支并关联追踪关系
5.后面再提交都可以直接使用git push 
//也可以使用git push origin 当前本地分支名  推送,但再次提交不能直接用git push

git push origin 本地分支名 和 git  push -u origin 本地分支名 的区别:
前者是将当前本地分支推送到origin主机对应分支上,后面不能直接使用git push
后者是将当前本地分支推送到origin主机对应分支上,同时指定origin为默认主机(因为当前本地分支可能与多个主机存在追踪关系,-u则是指定默认主机),后面就可以直接使用git push

本地分支和远程分支如何建立追踪关系:三种方式
1.手动建立:
git branch --set-upstream-to=<远程主机名>/<远程分支> <本地分支名>    //<远程主机名>/<远程分支>即origin/远程分支,origin是远程仓库的别名也是远程主机
2.push时建立:
git push -u <远程主机名,如origin> <本地分支名>  //加上-u参数,这样push时本地指定分支就和远程主机的同名分支建立追踪关系
3.新建分支时建立追踪关系:
git checkout -b <本地分支名> <远程主机名>/<远程分支>  //新分支指针指向<远程主机名>/<远程分支>所指的位置,
具体位置可用git log --online --graph查看
注意:在使用1和3命令前要先确保本地有名为<远程主机名>/<远程分支>的本地分支,没有就要先用git fetch或git pull命令从远程主机上抓取,抓取后自动产生.远程跟踪分支是远程分支状态的引用,它们是你不能移动的本地引用,用git branch看不到,得用git branch -r才可看到.
git branch -vv  //查看本地和远程的追踪关系

rm -rf 文件名   //删除(非常危险操作)

git config  --global user.name'JoinSheng'               	      //设置姓名
git config --global user.email'zscaoc@isoftstone.com'                 //设置邮箱
git config --global --replace-all user.email 'zscaoc@isoftstone.com'  //修改邮箱(注意:email后面有一个空格,不然修改不成功)
git config --global --replace-all user.name 'JoinSheng'               //修改姓名(注意:name后面有一个空格,不然修改不成功)
git config --list                                                     //查看配置信息

注意:不需要切出到文件夹目录外跟.git同级,在其里面提交就行,远程仓库保存其完整目录结构,但文件夹外的文件和文件夹添加不进去且防止push到远程仓库文件不在一个文件夹,需要在跟.git同级命名文件目录
(注意:添加的是文件到暂存区不是文件夹!!!)